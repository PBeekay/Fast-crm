"""
Notes Router
Not y√∂netimi endpoint'leri
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
import logging

import models
import schemas
from dependencies import get_db, get_current_user

# Router olu≈ütur
router = APIRouter(
    prefix="/api/customers",
    tags=["üìù Notes Management"],
    responses={404: {"description": "Not found"}},
)

logger = logging.getLogger("fastcrm")

@router.post("/{customer_id}/notes", response_model=schemas.NoteOut)
def add_note(
    customer_id: int, 
    note_in: schemas.NoteCreate, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """M√º≈üteriye not ekler"""
    logger.info(f"üìù Adding note to customer ID: {customer_id} (User: {current_user.email})")
    
    # M√º≈üteriyi kontrol et
    customer = db.query(models.Customer).filter(
        models.Customer.id == customer_id, 
        models.Customer.owner_id == current_user.id
    ).first()
    
    if not customer:
        logger.warning(f"‚ùå Customer not found for note: ID {customer_id} (User: {current_user.email})")
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Not olu≈ütur
    note = models.Note(
        customer_id=customer.id, 
        content=note_in.content, 
        created_by=current_user.id
    )
    db.add(note)
    db.commit()
    db.refresh(note)
    
    logger.info(f"‚úÖ Note added: ID {note.id} for customer {customer.name}")
    return note

@router.get("/{customer_id}/notes", response_model=List[schemas.NoteOut])
def list_notes(
    customer_id: int, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """M√º≈üterinin notlarƒ±nƒ± listeler"""
    logger.info(f"üìã Listing notes for customer ID: {customer_id} (User: {current_user.email})")
    
    # M√º≈üteriyi kontrol et
    customer = db.query(models.Customer).filter(
        models.Customer.id == customer_id, 
        models.Customer.owner_id == current_user.id
    ).first()
    
    if not customer:
        logger.warning(f"‚ùå Customer not found for notes: ID {customer_id} (User: {current_user.email})")
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Notlarƒ± getir
    notes = db.query(models.Note).filter(
        models.Note.customer_id == customer.id
    ).order_by(models.Note.created_at.desc()).all()
    
    logger.info(f"‚úÖ Listed {len(notes)} notes for customer: {customer.name}")
    return notes

@router.get("/{customer_id}/notes/{note_id}", response_model=schemas.NoteOut)
def get_note(
    customer_id: int, 
    note_id: int, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """Belirli bir notu getirir"""
    logger.info(f"üîç Getting note ID: {note_id} for customer ID: {customer_id} (User: {current_user.email})")
    
    # M√º≈üteriyi kontrol et
    customer = db.query(models.Customer).filter(
        models.Customer.id == customer_id, 
        models.Customer.owner_id == current_user.id
    ).first()
    
    if not customer:
        logger.warning(f"‚ùå Customer not found: ID {customer_id} (User: {current_user.email})")
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Notu getir
    note = db.query(models.Note).filter(
        models.Note.id == note_id, 
        models.Note.customer_id == customer.id
    ).first()
    
    if not note:
        logger.warning(f"‚ùå Note not found: ID {note_id} for customer {customer.name}")
        raise HTTPException(status_code=404, detail="Note not found")
    
    logger.info(f"‚úÖ Note retrieved: ID {note.id} for customer {customer.name}")
    return note

@router.put("/{customer_id}/notes/{note_id}", response_model=schemas.NoteOut)
def update_note(
    customer_id: int, 
    note_id: int, 
    note_update: schemas.NoteCreate,  # Reuse NoteCreate for updates
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """Notu g√ºnceller"""
    logger.info(f"‚úèÔ∏è Updating note ID: {note_id} for customer ID: {customer_id} (User: {current_user.email})")
    
    # M√º≈üteriyi kontrol et
    customer = db.query(models.Customer).filter(
        models.Customer.id == customer_id, 
        models.Customer.owner_id == current_user.id
    ).first()
    
    if not customer:
        logger.warning(f"‚ùå Customer not found: ID {customer_id} (User: {current_user.email})")
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Notu getir
    note = db.query(models.Note).filter(
        models.Note.id == note_id, 
        models.Note.customer_id == customer.id
    ).first()
    
    if not note:
        logger.warning(f"‚ùå Note not found: ID {note_id} for customer {customer.name}")
        raise HTTPException(status_code=404, detail="Note not found")
    
    # Notu g√ºncelle
    note.content = note_update.content
    db.commit()
    db.refresh(note)
    
    logger.info(f"‚úÖ Note updated: ID {note.id} for customer {customer.name}")
    return note

@router.delete("/{customer_id}/notes/{note_id}", status_code=204)
def delete_note(
    customer_id: int, 
    note_id: int, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    """M√º≈üteri notunu siler"""
    logger.info(f"üóëÔ∏è Deleting note ID: {note_id} for customer ID: {customer_id} (User: {current_user.email})")
    
    # M√º≈üteriyi kontrol et
    customer = db.query(models.Customer).filter(
        models.Customer.id == customer_id, 
        models.Customer.owner_id == current_user.id
    ).first()
    
    if not customer:
        logger.warning(f"‚ùå Customer not found for note deletion: ID {customer_id} (User: {current_user.email})")
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Notu getir
    note = db.query(models.Note).filter(
        models.Note.id == note_id, 
        models.Note.customer_id == customer.id
    ).first()
    
    if not note:
        logger.warning(f"‚ùå Note not found: ID {note_id} for customer {customer.name}")
        raise HTTPException(status_code=404, detail="Note not found")
    
    # Notu sil
    db.delete(note)
    db.commit()
    
    logger.info(f"‚úÖ Note deleted: ID {note_id} for customer {customer.name}")
    return
